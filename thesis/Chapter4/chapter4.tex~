\chapter{Portfolio optimisation}
\graphicspath{{Chapter4/figures/}}
\label{lab:PO}
Optimal portfolio is the ultimate goal of every investment manager; but the optimality criterion can be very different to each of them. In the infamous Markowitz's modern portfolio theory \cite{HM52}. it is assumed that investor attempt to maximize a portfolio's return and minimize the risk (measured by the variance of the portfolio return. For index tracker fund manager, the main objective of portfolio management is to track and replicate the exposure of a benchmark index\footnote{The lack of active management generally makes the fund less vulnerable to change of management and has the advatanges of lower fees and taxes}. It is the later where the focus of the thesis lie.

In this chapter, it begins with a brief introduction on index tracking fund, what it actually is and why it is becoming increasing important in the last decade and short summary on some of the causing factor of tracking error. It then begins to describe how this problem can be formulated as a stochastic control problem, which is then turned into a parameter estimation in SMC framework. It then presents some of the experiments carried out to verify this approach, starting with a simple proof of concept experiment in Section \ref{sec:toy}, continue on with a more complicated example with real-world data in Section \ref{sec:exp2} and concluding the chapter with an experiment in demonstrating how the Model Predictive Control (MPC) can be incorporating into the basic framework.

%We investigate in this chapter how SMCs can be used to search for the optimal control parameters for portfolio optimisation problem in financial market, i.e., what decision a portfolio manager need to do to minimize the portfolio's tracking error to the target's stock index over a finite time horizon. This chapter is organised as follows: In Section \ref{sec:po}  shows how a portfolio optimisation problem can be re-casted into a parameter estimation problem in SMC framework. Section \ref{sec:toy} details the experiments in accessing how well this approach perform to track various target signals generated by some known models. Section \ref{sec:real} presents the experiments of examining the approach using real-world data collected from Yahoo finance. Section \ref{sec:extension} details possible extensions that can be easily achieved with this framework with some concrete examples. Finally, Section \ref{sec:summary} concludes this chapter with a summary of results.

\section{Index Tracking Fund}
An index can be thought of a summary statistics of a market, typically formed as weighted average of some financial instruments. For example, FTSE 1010 is an index attempts to represents the performance of the 100 biggest companies in UK. This index is however not a product one can invest directly.

To allows investors to take exposure to the markets (as represented by the indices), index tracker funds are introduced. The funds generally follow very strict and transparent rules with the main objective to track their benchmark indices as close as possible. Investors of these funds therefore are only exposed to the market risks of the chosen indices, carving away most risk associated with the investment process of the traditional active fund management. 

\subsection{Index Replication}
To track an index, the simplest way is to replicate the index by investing all the components of the benchmark index. However, this can be costly and different to manage, considering some of the indices may have huge number of components, e.g., MSCI World index that consists of 1612 components from many different countries. Instead, one could partial replicate the index by sampling some of the components that are most representative of hte index. This can mean those components with larger weights, more volatiles or less correlated in return (assuming that correlated components would have their returns ``cancelled out'' one another). This partial replication could save transaction cost, at the time same, introducing some tracking errors to the funds.

Instead of physically replicating the index by investing in the components, the portfolio manager could decide in entering a swap agreement with a counterparty (typically investment bank) that provides the exact return of the stock market or commodity itâ€™s tracking. Essentially, this transfers the market risk to the counterparty, at the same introducing the counterparty default risk. This is known synthetic replication. 

\subsection{Causing factors of tracking error} 
To evaluate the performance of index tracking fund, different metrics have been introduced to quantify the mismatch between the performance of a fund and its benchmark. For example, tracking difference is the sum of absolute difference in returns between of a fund and its benchmark. Here, we adopt the tracking error as our metric, which is defined to be the standard deviation of the absolute difference of the returns of the fund and the benchmark defined in \cite{BJ13}. Formally, tracking error is defined to be:
\begin{equation}
  \epsilon = \sqrt{\E[(r_p - r_b)^2]}
\end{equation}

The tracking error can be caused by different factors: some of which can be summarised as follows:
\begin{enumerate}
\item Benchmark index rebalance --- the benchmark index is re-weighting its constitutents periodically to reflex the changes on the market based on its methodology. To track the index, the fund has to adjust its portfolio accordingly. This will incur some trasaction costs. During the index rebalance period, cash drag can happen between the liquidation of the constituents that have weights reduced/dropped and the addition of the constituents that have weights increased/added. This cash is essentially not participating in the market and therefore do not reflex the changes on the benchmark index.
\item different assumption on dividend trinvestment and taxation --- This is best illustrate with examples. For example, the benchmark index calculation may assume immediate reinvestment of dividends on ex-dividend dates but the fund may only able to reinvest the dividend after receiving it. The tax treatment may on the dividends amy also different too.
\item Replication and Sampling techniques --- funds may choose too replicate the benchmakr index by selecting a subset of the constituents (often the ones with larger weights and more liquid) in an effort to minimize the transaction costs. This exclusion of the smaller, less liquid constitutents may introduce another source od tracking error, especially under stressed market.
\item Total Expense Ratio --- the average annual expense that is charged to the fund on daily basis to cover the management cost.
\end{enumerate}
This list is by no mean exclusive. See \cite{BJ13} for further detail.

\section{Technical Approach}
To carry out portfolio optimisation, various approaches have been explored in the past, mainly in an anlytical fahsion, in adopting necessary assumption as necessary. This seems rather restrictive; there are many instances where numerical method has been used to derive an approximate or even more effective solution to the problem in question. For example, Monte Carlo technique is used to do integral, evolutionary techniques applied in engineering domains, etc.

Our approach to the problem in this thesis is a radical one. We view a minimising portfolio tracking error as \emph{stochastic} control problem. Instead of using a traditional deterministic state space models, we use as stochastic modelling approach to carry out the portfolio optimisation. In particular, we focus here the the problem in minimizing the tracking error between a portfolio and its benchmark index using a stochastic control modelling approach. Our aim is to determine what investment actions (buy or sell) on the necessary constituents a portfolio manager has to do on a daily basis across the investment horizon to minimize the tracking error of the fund managed. We will proceed by presenting the stochastic state space model that we assume throughout this thesis. This model is by no mean to compete the state of the art model in realistic portfolio optimisation, but to motivate further work in this direction.

\subsection{Model specification and optimisation objective}
We adopt here the conditional linear Gaussian model, in which the transition density and likelihood are Gaussian distributions with center lied at a point of a linear combination of the known conditional control parameters, $u_t$ of the following:
g form:
\begin{align}
  f_t(x_t \mid x_{t-1}, u_t) &= N(A_t(u_t) x_{t-1} + F_t(u_t), B_t(u_t)B_t(u_t)^T) \nonumber \\
  g_t(y_t \mid x_t, u_t)    &= N(C_t(u_t) x_t, D_t(u_t)D_t(u_t)^T)
\end{align}
where $A_t$, $B_t$, $C_t$, $D_t$ are known matrix or vector operations and ${u_t}_{t \geq 0}$ is a determinstic control input sequence that is used regulate the hidden states.

%, ${x_t}_{t \geq 0}$, which are assumed to be a discrete time hidden Markov process that has an initial value $x_0$ and admit Gaussian transition density $f_t(x_t \mid x_{t_1}, u_t$ and ${Y_t}_{t \geq 0}$ is the only observable process which has a Gaussian conditional likelihood density $g_n(y_n \mid x_n, u_n)$.

With this model, the objective is to search for a sequence of controls $u_{1:t}$ that would result in a sequence of observations $y_{1:t}$ is closed to a reference signal $y^{ref}_{1:T}$. This problem is often known as stochastic regulation problem. We adopt here the following finite horizon multiplicative reward function:
\begin{equation}
  J(u_{1:T},y^{ref}_{1:T}, x_0) = \E_{x_0}\left[ -\dfrac{1}{2}\displaystyle\sum^T_{t=1}\left(\vert\vert y^{ref}_t C_t(u_t)x_t - G_t(u_t) \vert\vert^2_{(D_t(u_t)D_t(u_t)^T)^{-1}}  + \vert\vert u_t - \Xi_t u_{t-1} \vert\vert^2_{L_t}\right) \right]
\end{equation}
where the expectation is taken with respect to the whole path of the Markov Chain ${X_t}^T_{t=1}$,, starting with $X_0 = x_0$,  i.e., $E_{x_0}[\phi(X_{1:t})] = \int \phi(X_{1:T}) \prod f_t(x_t \mid x_{t-1})~dx_{1:t}$, with $Q_t$, $L_t$ and $\Xi_t$ are assumed to be known. The corresponding optimal open loop policy is:
\begin{equation}
  u^*_{1:T} = \arg\max_{u_{1:T}} J(u_{1:T};y^{ref}_{1:t};x_0)
\end{equation}
assuming the maximum is indeed attainable and well defined. This reward resembles closely the risk sensitive control formulation described in \cite{}. However, the problem here has a slightly different structure due to the actual distribution used in the expectation. The absence of an explicit risk sensitivy constant and the presece of $y^{ref}$ as an explicity set reference rathr than an actual observation of th state. Neverthe less, a risk sensitivty constant could still be added through $D_n$, $L_n$ if necessary.

\subsection{Problem formulation}
Under the realm of Bayesian inference framework, we treat the control inputs $u$ as random variables that admit a prior distribution. We will further assume the sequence of control $u_n$ is a Markov process with transition distribution $f_t(u_i \mid u_{i-1}$. The objective is to compute the marginal posterior distribution density $p(u_{0:t} \mid y^{ref}_{0:t}$. This posterior desntiy function can be derived as follows:
\begin{align}
p(u_{0:t} \mid y^{ref}_{0:t}) &\propto p(u_{0:t}) p(y^{ref}_{0:t} \mid u_{0:t}) \\
&= \prod^t_{i=1} p(y^{ref} \mid y^{ref}_{0:i-1}, u_{0:i}) f(u_i \mid u_{i-1})
\end{align}

\begin{align}
p(u_{0:t} \mid y_{0:t}) &\propto p(y_k \mid u_{0:t}, y_{0:t-1}) p(u_{0:t} \mid y_{0:t-1}) \nonumber \\
&=  p(y_k \mid u_{0:t}, y_{0:t-1}) p(u_t \mid u_{0:t-1}, y_{0:t-1}) p(u_{0:t-1} \mid y_{0:t-1}) \nonumber \\
&=  p(u_{0:t-1} \mid y_{0:t-1}) p(y_k \mid u_{0:t}, y_{0:t-1}) p(u_t \mid u_{t-1}, y_{0:t-1})
\end{align}

We can solve this equation using SMC by consider the pair etc.

However, a more efficient algorithm can be derived by considering the following factorisation:
\begin{equation}
  p(x_{0:t}, u_{0:t} \mid y_{1:t}) = p(x_{0:t} \mid u_{0:t}, y_{1:t}) p(u_{0:t} \mid y_{1:t})
\end{equation}

Note that density $P(x_{0:t} \mid u_{0:t}, y_{1:t}$ is Gaussian mixture model, which can be computed analytically usign Kalman Filfter given the density $p(u_{0:t} \mid y_{1:t}$, which has the following recursion form:
\begin{equation}
 1+1
\end{equation}
This can be resolved using SMC by using particles to do this.

Assume for the time being that the control inputs are set as U1:n = u1:n and remain fixed. Recall {Xn}n0 and {Yn}n1 are assumed to be stochastic processes obeying a Markov transition density fn(xn|xn1,un) and a conditionally independent likelihood density gn(yn|xn,un) respectively. Given any observed y1:n realisation, inference about the states X1:n may be based on the following posterior density

show the algorithm 
\section{Numerical example on stationary oscillating wave}
We will consider a simple linear Gaussian state space model as presented earlier as \eqref{eq:gaussianmodel}, with $A_t=B_t=C_t=D_t=I$, $F_t{u_t}=u_t$, $G_t{u_t}=0$, $Xi = 0$, $u=0$. This model can be re-written as follows:
\begin{align}
  X_t = X_{t-1} + W_t + U_t, & W_t \sim N(0,I) \\
Y_t = X_{t-1} + V_t, & N_t \sim N(0,I)
\label{eq:refnmodel}
\end{align}
with the target reference is set to be an oscillating wave: $y_t = \cos(0.2 \pi t + 0.3)$. This toy example is first introduced in \cite{NK11}. It serves two purposes here. Firstly, it provides a simple example to verify our implementation\footnote{Strictly speaking, testing increases confidence but  does not prove no bug, which is almost impossible in practice.} Secondly, it severs as benchmark for the following experiments in which we attempt to use more complicated reference signals and models.

Setting the maximum time period, $T=50$, 

We proceed by examining the algorithm for the following different implementations: (a) qn = fn without
using the MCMC move (Step 2(d)), (b) qn = fn with the MCMC move and (c) qn being the optimal importance density of [13] without the MCMC case. In the last case the MCMC step was omitted because when the optimal importance density is used the improvement in performance was marginal. In the MCMC move we will use a random walk proposal. For  = 100, 1000 and N = 200, 500, 1000, 5000, 10000 we present box plots for
logâ‡¡T(UI1:T)inFigure1after30independentrunsofthealgorithm,whereUI1:T istheestimatorofuâ‡¤1:T ineach run. Similarly, in Figure 2 we plot U I1:T and the particle population nU i1:T oNi=1 taken from one run of the each
ï¿¼ï¿¼ï¿¼ï¿¼of the same cases, but this time we show results only for N = 10000. Simulations took roughly 3, 70 and 4 seconds per 1000 particles for (a), (b), (c) respectively when implemented in Matlab using a 2.4 GHz processor. The algorithm seems to perform quite well in most settings and very well when the optimal importance distribution is used. For the case where qn = fn, MCMC seems to improve the performance of the algorithm.
The improvement is more evident when  = 1000 both in the box plots and when plotting nUi1:T oNi=1, for which the degeneracy is apparent without the MCMC step.

\subsection{Period length performance}
We extend the time step to be $90$ and $250$ steps and looks at the corresponding performance. Due to the increase of time step, it makes sense to have more particles to track them and also look at the performance of performance of different order of $\gamma$. Based on the same metric, the results are summarised in Figure X.

\subsection{Increasing the power}

\section{Different reference signals}
Given the initial result looks promising, we attempt to investigate with the following more complicated reference signals:
\begin{enumerate}
\item reference signal treding osccilating wave ---
\item two un-correlated bi-variate signals ---
\item two correlated bi-variate signals ---
\item ten different signals ---
\end{enumerate}

\section{Discussion and possible extension}

\section{Tracking DAX Index}
In this section, we attempt to use the presented algorithm to track the financial index using real-world data. We shall look at the German's DAX (Deutscher Aktienindex) Index, which consists of 30 German's blue chip stocks listed on Frankfurt Stock Exchange as the constituents from 1st January 2014 up to 30th June 2014. It represents $80\%$ of the aggregated prime standard's market capitalization. We choose to work on the DAX Index for pragmatic reason. It is one of the major world indices that is tracked by funds, small number of constituents and data accesibility\footnote{Actually, we first looked at Dow Jones Industrial Average (DJIA) Index. It was later found some of the data is available. Having said that, the preliminary results concur with the findings we have with DAX Index discussed here.}. For further detail on DAX Index methodology, refer \cite{DAX14}.

In the first experiment, we define a simple hypothetical sub-index, $DAX4$ consists of four constituents from the DAX Index with highest weights as of 2nd January 2014, namely Bayer (BAYN), Siemens (SIE), BASF (BAS) and Daimler (DAI). Then, the $DAX4$ index level is calculated as the simple weighted average of the close prices adjusted for dividends and splits downloaded from Yahoo Finance as follows:
\begin{equation}
  y = \sum_{s \in \mathcal{S}} w_s x_s
\end{equation}
where $y$ is the index level, $\mathcal{S}$ consists of the four stocks, $w_s$ the price of a stock $s$, $w_s$ is the weight of stock $s$. The weights of these four stocks are assigned to be $0.4$, $0.3$, $0.2$ and $0.1$ respectively. The adjusted close prices of each stock along with the calculated index level are shown in Figure \ref{fig:adjclose}.

\begin{figure}[htbp]
 \centering
 \includegraphics[width=\textwidth]{adjclose}
 \caption{The adjusted close price of the 4 stocks and the calculated index level of $DAX4$.}
 \label{fig:adjclose}
\end{figure}

The portfolio optimisation problem is formulated as such $y$ is viewed as the target reference level that a portfolio manager attempt to replicate as close as possible by changing his position of his portfolio consists of the constituent stocks in $\mathcal{S}$, at the same time, minimize the trasaction cost incurred in position changes.

To solve this problem using the SMC algorithm proposed,  the following state space modelling is used:
\begin{align}
  X_t &= X_{t-1} + F_t(U_t) + \mu_t + \Sigma_t \\
  Y_t &= C_t(U_t)^{T}X_t
\end{align}
where $X_t$ is the vector of stock prices at time $t$ modelled with arithmetic Brownian Motion, $U_t$ is the vector of control input at time $t$ that represents the position we have for each stock, $\mu_t$ and $\Sigma_t$ are the vector of estimated mean and the estimated covariance matrix of stock returns and $Y_t$ is the index level at time $t$. The values of $\mu_t$ and $Sigma_t$ are estimated using Exponential Weighted Moving Average (EWMA) with the decay rate, $\lambda$, set to $0.94$ as described JP Morgan's RiskMetrics\cite{RM96}, which can be written down in a nice recursion form as follows:
\begin{align}
  \mu_t &= \lambda r_{t} + (1-\lambda) \mu_{t-1} \\
  \Sigma_t &= \lambda \sigma_{t} + (1-\lambda) \Sigma_{t-1} 
\end{align}
It is obvious from these equations that the EWMA estimate value depends on all previous estimates. To ensure the estimate are correct, a half year warm up period is used from 1st July 2013.

It is worth to re-iterate here that this model is just a means to an end to demonstrate the key idea of thesis how SMC can be used for portfolio optimisation. There are more sophisticated models, e.g., Geometric Brownian Motion with drift, Jump diffusion model, etc.

Given the above model, we can write the utility we attempt to maximise as follows:
\begin{equation}
1 + 1
\end{equation}
One can interpret the model as follows:

\subsection{Result and discussion}
Various setting are attempted and repeated $n$ times, We tried and repeated couple of settings $T x L x $

The resulting $Y$ and $u$ are summaried in figure x.

As sho, we can see that the method is effective etc.

\subsection{Extension}
Tracking the full index, the results are shown here

\section{Model Control Predictive}
Instead, we use this idea.


\subsection{Result}

\endinput


\section{Evidence for the thesis and future work}
\label{sec:5.eftt}
Formulating an optimal security policy is difficult. Current research
work attempts to alleviate this issue by looking for ways to analyse
and refine security policies in a top-down manner. We propose an
alternative view on this issue: inferring security policies from
decision examples. This idea is entirely novel. There is no previous
work to my knowledge in the application of EAs or machine learning
techniques in inferring security policies.

In this chapter, we presents some experiments that have been carried
out to validate this proposal using EAs. Three different ways of
representing security policies and the use of two different EAs are
demonstrated. The results show that the inference process is largely
independent of many parameters. We also show how the fuzzy set
ensemble based approaches can be easily integrated into the policy
inference framework to enhance the inference ability, yet it remains
an interesting research topic to search for the optimal ways of
defining the underlying target fuzzy membership functions.

EAs have shown several potentials in determining the security policies
in the experiments. In particular, EAs are found to be able to quickly
infer security policies with considerable complexity. The performance
of these inferred policies is comparable to the original reference
models that are used to generate the training sets. These techniques
are also able to scale well with the range of input/output variables
and to tolerate~``wrong'' examples in a training set. An obvious way
forward is to validate this concept with other inference approaches
and make a recommendation on which approach is better for what
circumstance.

Being a data driven approach, the representativeness of the training
set is crucial. Indeed, the experiments show that even the inference
of the simple MLS Bell-LaPadula model may fail because of
this. Inference summarises rather than speculates; the techniques do
not know how to handle an unseen case.

As in other applications of EAs, the fitness function used is vital in
guiding the search. Poor fitness function may result in policies that
are suboptimal. Interesting future work would be to examine how to
design a fitness function in a principled manner that is suitable for
cost sensitive learning, in which different types of prediction errors
are not equally costly. This is likely to be appropriate in security
policy in which leaking of high sensitivity information is obviously
far more severe than leaking of low sensitivity information.

\section{Conclusions}
\label{sec:conclusion5}
This chapter presents some proof-of-concept experiments that have been
carried out to validate our proposal: inferring security policies from
decision examples using EAs. It first presents the experiments on
inferring some simple binary decision policies and continues with the
experiments on inferring the Fuzzy MLS model, which is a more
complicated multi-decision policy model. In all cases, the results
show that EAs are able to infer policies that can approximate (if not
refine) the original reference models that are used to generate the
training sets. The technique is also shown to be able to scale with
the range of input/output variables and to tolerate~``wrong'' examples
in the training set.

For a dynamic environment, the ability to infer policy from examples
alone is not sufficient. The inferred and learnt policies will
eventually become suboptimal over time as the operational requirements
change. The policy needs to be updated continually to maintain its
optimality. The next chapter demonstrates how multi-objective
evolutionary algorithms (MOEAs) can be used to achieve this goal.
