import numpy as np
import scipy as sp
from scipy import stats

class StochasticProcess:
    def __init__(self, parameters):

    def sample_initial(self):
        return sp.stats.norm(self.mu,self.sigma).rvs()

    def initial_density(self, x):
        return sp.stats.norm(self.mu,self.sigma).pdf(x)
 
    def sample_transition(self, x):
        return sp.stats.norm(x+self.mu ,self.sigma).rvs()

    def transition_density(self, x, x_next):
        return sp.stats.norm(x+self.mu, self.sigma).pdf(x_next)
 
    def sample_observation(self, x):
        return sp.stats.norm(x+self.v, self.tau).rvs()
  
    def observation_density(self, y, x):
        return sp.stats.norm(x+self.v, self.tau).pdf(y)

    def simulate(self, T=100, seed=12345):
        self.xs= np.zeros(T, x_dim)
        self.ys= np.zeros(T, y_dim)
        
        # initialise x[0] and y[0]                                                               
        self.xs[0] = self.sample_initial()
        self.ys[0] = self.sample_observation(self.xs[0])
        
        for t in range(1,T):
            self.xs[t] = self.sample_transition(self.xs[t-1])
            self.ys[t] = self.sample_observation(self.xs[t])

    def plot(self, window=None):
        if window:
           pass
